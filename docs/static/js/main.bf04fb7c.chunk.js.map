{"version":3,"sources":["components/AddCategorie.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","reportWebVitals.js","index.js"],"names":["AddCategorie","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","placeholder","value","name","onChange","target","getGifs","category","a","url","encodeURI","fetch","respuesta","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","console","log","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","useFetchGifs","GifExpertApp","categories","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"+KAwCeA,EArCM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAEpB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAcA,OACI,8BACI,sBAAMC,SAVO,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAMd,SACI,uBACIO,KAAK,OACLC,YAAY,mCACZC,MAAOV,EACPW,KAAK,SACLC,SApBU,SAACT,GACvBF,EAAcE,EAAEU,OAAOH,e,+BCShBI,EAjBF,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACNC,EADM,iDAC0CC,UAAUH,GADpD,+DAEYI,MAAMF,GAFlB,cAENG,EAFM,gBAGWA,EAAUC,OAHrB,uBAGJC,EAHI,EAGJA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EACzB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAT9B,kBAaLM,GAbK,4CAAH,sDCYEO,MAVf,YAAwC,IAAlBJ,EAAiB,EAAjBA,GAAIC,EAAa,EAAbA,MAAOV,EAAM,EAANA,IAE7B,OADAc,QAAQC,IAAI,CAACN,KAAIC,QAAOV,QAEpB,sBAAKgB,UAAU,OAAf,UACI,qBAAKC,IAAKjB,EAAKkB,IAAKR,IACpB,4BAAIA,Q,KCsBDS,MAxBf,YAAgC,IAAbrB,EAAY,EAAZA,SAGf,ECLsB,SAACA,GACvB,MAA0BhB,mBAAS,CAC/BuB,KAAM,GACNe,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAU,WACN1B,EAAQC,GACH0B,MAAK,SAAAhB,GAAG,OACLc,EAAS,CACLjB,KAAMG,EACNY,SAAS,SAItB,CAACtB,IASGuB,EDnB2BI,CAAa3B,GAAjCa,EAAd,EAAQN,KAAce,EAAtB,EAAsBA,QAEtB,OACI,qCACI,oBAAIJ,UAAU,YAAd,SAA2BlB,IAC1BsB,GAAW,mBAAGJ,UAAU,YAAb,wBACZ,qBAAKA,UAAU,YAAf,SAGQL,EAAOJ,KAAI,SAAAC,GAAG,OACV,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEQtBiB,EAvBM,WACjB,MAAoC5C,mBAAS,CAAC,SAA9C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KACA,OACI,qCACI,gDACA,4DACA,cAAC,EAAD,CAAcA,cAAeA,IAC7B,uBACA,6BAEQ8C,EAAWpB,KAAI,SAAAT,GAAQ,OAEnB,cAAC,EAAD,CAEIA,SAAUA,GADLA,YCLlB8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBN,MAAK,YAAkD,IAA/CO,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCCdO,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,SAM1BX,K","file":"static/js/main.bf04fb7c.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategorie = ({ setCategories }) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n        setInputValue(e.target.value);\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if (inputValue.trim().length > 2) {\n            setCategories(cats => [ inputValue, ...cats]);\n            setInputValue('');\n        }\n    };\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    placeholder=\"Add category e.g: The Beatles...\"\n                    value={inputValue}\n                    name=\"newCat\"\n                    onChange={handleInputChange}\n                />\n            </form>\n        </div>\n    )\n}\n\nAddCategorie.propTypes = {\n    setCategories : PropTypes.func.isRequired\n}\n\n\n\nexport default AddCategorie;\n","const getGifs = async (category) => {\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=i5G1V5rCI8MqtSveLC8J0K4Kd0erf4b3`;\n    const respuesta = await fetch(url);\n    const { data } = await respuesta.json();\n\n    const gifs = data.map(img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    });\n\n    return gifs;\n};\n\n\nexport default getGifs;","import React from 'react'\n\nfunction GifGridItem({id, title, url}) {\n    console.log({id, title, url});\n    return (\n        <div className=\"card\">\n            <img src={url} alt={title}/>\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GifGridItem\n","import React from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\nimport '../index.css';\n\nfunction GifGrid({ category }) {\n\n\n    const { data: images, loading } = useFetchGifs(category);\n\n    return (\n        <>\n            <h3 className=\"cat-title\">{category}</h3>\n            {loading && <p className=\"load-text\">Loading...</p>}\n            <div className=\"card-grid\">\n\n                {\n                    images.map(img => (\n                        <GifGridItem\n                            key={img.id}\n                            {...img}\n                        />\n                    ))\n                }\n            </div>\n        </>\n    )\n}\n\nexport default GifGrid\n","import { useEffect, useState } from \"react\";\nimport getGifs from '../helpers/getGifs';\n\nexport let useFetchGifs = (category) => {\n    const [state, setstate] = useState({\n        data: [],\n        loading: true\n    });\n\n    useEffect(() => {\n        getGifs(category)\n            .then(img =>\n                setstate({\n                    data: img,\n                    loading: false\n                })\n\n            );\n    }, [category]);\n\n    // setTimeout(() => {\n    //     setstate({\n    //         data: [1, 2, 3, 4, 5, 6, 7],\n    //         loading: false\n    //     })\n    // }, 3000);\n\n    return state;\n}","import React, { useState } from 'react'\nimport AddCategorie from './components/AddCategorie';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n    const [categories, setCategories] = useState(['Gifs']);\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <h3>Search gifs by category :D</h3>\n            <AddCategorie setCategories={setCategories} />\n            <hr />\n            <ol>\n                {\n                    categories.map(category => (\n\n                        <GifGrid\n                            key={category}\n                            category={category}\n                        />\n                    ))\n                }\n            </ol>\n        </>\n    )\n}\n\nexport default GifExpertApp;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\n\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}